require 'geetest_ruby_sdk/encrypt'
require 'geetest_ruby_sdk/register'
require 'geetest_ruby_sdk/validator'

module GeetestRubySdk
  # This class is used internally by GeetestRubySdk to send the request
  # Mandatory parameters to initialize an instance:
  # * :geetest_id
  # * :geetest_key
  #
  # => register: to register a geetest service
  # Optional parameters
  # * :digest_mod => encrypt mode
  # * :options => some options for callback like user_name, password
  # => validate?: to validate if the geetest is success
  # Required parameters
  # * :challenge => the code from client generated by geetest
  # * :validate => the code from client generated by geetest
  # * :seccode => the code from client generated by geetest
  # Optional parameters
  # * :digest_mod => encrypt mode
  # * :options => some options for callback like user_name, password
  # => local_validate?: validate on local when outage mode is triggered
  # Required parameters
  # * :challenge => the code from client generated by geetest
  # * :validate => the code from client generated by geetest
  # Optional parameters
  # * :digest_mod => encrypt mode
  class Account
    attr_accessor :geetest_id, :geetest_key

    def initialize(geetest_id, geetest_key)
      @geetest_id = geetest_id
      @geetest_key = geetest_key
    end

    def register(digest_mod: nil, **options)
      GeetestRubySdk::Register.new(account: self, digest_mod: digest_mod).register(options)
    end

    def validate?(challenge, validate, seccode, digest_mod: nil, **options)
      GeetestRubySdk::Validator.new(account: self, digest_mod: digest_mod).valid?(challenge, validate, seccode, options)
    end

    def local_validate?(challenge, validate, digest_mod: nil)
      GeetestRubySdk::Validator.new(account: self, digest_mod: digest_mod).local_valid?(challenge, validate)
    end
  end
end
