# frozen_string_literal: true

module GeetestRubySdk
  # This class is used internally by GeetestRubySdk to send the request
  # Mandatory parameters to initialize an instance:
  # * :geetest_id
  # * :geetest_key
  #
  # => register: to register a geetest service
  # Optional parameters
  # * :digest_mod => encrypt mode
  # * :options => some options for callback like user_name, password
  #
  # => validate?: to validate if the geetest is success
  # Required parameters
  # * :challenge => the code from client generated by geetest
  # * :validate => the code from client generated by geetest
  # * :seccode => the code from client generated by geetest
  # Optional parameters
  # * :digest_mod => encrypt mode
  # * :options => some options for callback like user_name, password
  class Account
    attr_accessor :geetest_id, :geetest_key, :digest_mod

    def initialize(geetest_id, geetest_key, **options)
      @geetest_id = geetest_id
      @geetest_key = geetest_key
      @digest_mod = options.fetch(:digest_mod, GeetestRubySdk::DEFAULT_DIGEST_MOD)
    end

    def register(**options)
      Register.new(account: self).register(options)
    end

    def validate?(challenge, validate, seccode, **options)
      Validator.new(account: self).valid?(challenge, validate, seccode, options)
    end
  end
end
