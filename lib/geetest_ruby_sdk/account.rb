require 'geetest_ruby_sdk/encrypt'
require 'geetest_ruby_sdk/register_request'
require 'geetest_ruby_sdk/validate_request'

module GeetestRubySdk
  # This class is used internally by GeetestRubySdk to send the request
  # Mandatory parameters to initialize an instance:
  # * :geetest_id
  # * :geetest_key
  #
  # => register: to register a geetest service
  # Optional parameters
  # * :digest_mod => encrypt mode
  # * :options => some options for callback like user_name, password
  # => validate?: to validate if the geetest is success
  # Optional parameters
  # * :challenge => the code from client generated by geetest
  # * :validate => the code from client generated by geetest
  # * :seccode => the code from client generated by geetest
  # * :digest_mod => encrypt mode
  # * :options => some options for callback like user_name, password
  class Account
    attr_accessor :geetest_id, :geetest_key

    def initialize(geetest_id, geetest_key)
      @geetest_id = geetest_id
      @geetest_key = geetest_key
    end

    def register(digest_mod = GeetestRubySdk::Encrypt::DEFAULT_DIGEST_MOD, options = {})
      origin_challenge = GeetestRubySdk::RegisterRequest.get @geetest_id, @geetest_key, digest_mod, options
      return { success: 0 } if origin_challenge.nil? || origin_challenge.empty?

      { challenge: origin_challenge, gt: @geetest_id, success: 1 }
    end

    def validate?(challenge, validate, seccode, digest_mod = GeetestRubySdk::Encrypt::DEFAULT_DIGEST_MOD, options = {})
      secret = @geetest_key + 'geetest' + challenge
      challenge_encode = GeetestRubySdk::Encrypt.encrypt_with secret, digest_mod: digest_mod, secret_key: @geetest_key
      return false unless validate == challenge_encode

      target_seccode = GeetestRubySdk::Encrypt.encrypt_with(seccode, digest_mod: digest_mod, secret_key: @geetest_key)
      GeetestRubySdk::ValidateRequest.post(challenge, validate, seccode, options) == target_seccode
    end
  end
end
